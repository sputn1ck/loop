// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package swapserverrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetsSwapServerClient is the client API for AssetsSwapServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetsSwapServerClient interface {
	RequestAssetLoopOut(ctx context.Context, in *RequestAssetLoopOutRequest, opts ...grpc.CallOption) (*RequestAssetLoopOutResponse, error)
	RequestAssetBuy(ctx context.Context, in *RequestAssetBuyRequest, opts ...grpc.CallOption) (*RequestAssetBuyResponse, error)
	RequestMusig2Sweep(ctx context.Context, in *RequestMusig2SweepRequest, opts ...grpc.CallOption) (*RequestMusig2SweepResponse, error)
}

type assetsSwapServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetsSwapServerClient(cc grpc.ClientConnInterface) AssetsSwapServerClient {
	return &assetsSwapServerClient{cc}
}

func (c *assetsSwapServerClient) RequestAssetLoopOut(ctx context.Context, in *RequestAssetLoopOutRequest, opts ...grpc.CallOption) (*RequestAssetLoopOutResponse, error) {
	out := new(RequestAssetLoopOutResponse)
	err := c.cc.Invoke(ctx, "/looprpc.AssetsSwapServer/RequestAssetLoopOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsSwapServerClient) RequestAssetBuy(ctx context.Context, in *RequestAssetBuyRequest, opts ...grpc.CallOption) (*RequestAssetBuyResponse, error) {
	out := new(RequestAssetBuyResponse)
	err := c.cc.Invoke(ctx, "/looprpc.AssetsSwapServer/RequestAssetBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsSwapServerClient) RequestMusig2Sweep(ctx context.Context, in *RequestMusig2SweepRequest, opts ...grpc.CallOption) (*RequestMusig2SweepResponse, error) {
	out := new(RequestMusig2SweepResponse)
	err := c.cc.Invoke(ctx, "/looprpc.AssetsSwapServer/RequestMusig2Sweep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetsSwapServerServer is the server API for AssetsSwapServer service.
// All implementations must embed UnimplementedAssetsSwapServerServer
// for forward compatibility
type AssetsSwapServerServer interface {
	RequestAssetLoopOut(context.Context, *RequestAssetLoopOutRequest) (*RequestAssetLoopOutResponse, error)
	RequestAssetBuy(context.Context, *RequestAssetBuyRequest) (*RequestAssetBuyResponse, error)
	RequestMusig2Sweep(context.Context, *RequestMusig2SweepRequest) (*RequestMusig2SweepResponse, error)
	mustEmbedUnimplementedAssetsSwapServerServer()
}

// UnimplementedAssetsSwapServerServer must be embedded to have forward compatible implementations.
type UnimplementedAssetsSwapServerServer struct {
}

func (UnimplementedAssetsSwapServerServer) RequestAssetLoopOut(context.Context, *RequestAssetLoopOutRequest) (*RequestAssetLoopOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAssetLoopOut not implemented")
}
func (UnimplementedAssetsSwapServerServer) RequestAssetBuy(context.Context, *RequestAssetBuyRequest) (*RequestAssetBuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAssetBuy not implemented")
}
func (UnimplementedAssetsSwapServerServer) RequestMusig2Sweep(context.Context, *RequestMusig2SweepRequest) (*RequestMusig2SweepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMusig2Sweep not implemented")
}
func (UnimplementedAssetsSwapServerServer) mustEmbedUnimplementedAssetsSwapServerServer() {}

// UnsafeAssetsSwapServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetsSwapServerServer will
// result in compilation errors.
type UnsafeAssetsSwapServerServer interface {
	mustEmbedUnimplementedAssetsSwapServerServer()
}

func RegisterAssetsSwapServerServer(s grpc.ServiceRegistrar, srv AssetsSwapServerServer) {
	s.RegisterService(&AssetsSwapServer_ServiceDesc, srv)
}

func _AssetsSwapServer_RequestAssetLoopOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAssetLoopOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsSwapServerServer).RequestAssetLoopOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.AssetsSwapServer/RequestAssetLoopOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsSwapServerServer).RequestAssetLoopOut(ctx, req.(*RequestAssetLoopOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsSwapServer_RequestAssetBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAssetBuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsSwapServerServer).RequestAssetBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.AssetsSwapServer/RequestAssetBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsSwapServerServer).RequestAssetBuy(ctx, req.(*RequestAssetBuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsSwapServer_RequestMusig2Sweep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMusig2SweepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsSwapServerServer).RequestMusig2Sweep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.AssetsSwapServer/RequestMusig2Sweep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsSwapServerServer).RequestMusig2Sweep(ctx, req.(*RequestMusig2SweepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetsSwapServer_ServiceDesc is the grpc.ServiceDesc for AssetsSwapServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetsSwapServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "looprpc.AssetsSwapServer",
	HandlerType: (*AssetsSwapServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAssetLoopOut",
			Handler:    _AssetsSwapServer_RequestAssetLoopOut_Handler,
		},
		{
			MethodName: "RequestAssetBuy",
			Handler:    _AssetsSwapServer_RequestAssetBuy_Handler,
		},
		{
			MethodName: "RequestMusig2Sweep",
			Handler:    _AssetsSwapServer_RequestMusig2Sweep_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assets.proto",
}
