// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package swapserverrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HyperloopServerClient is the client API for HyperloopServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HyperloopServerClient interface {
	GetHyperLoopStatus(ctx context.Context, in *GetHyperLoopStatusRequest, opts ...grpc.CallOption) (*GetHyperLoopStatusResponse, error)
	RegisterHyperloop(ctx context.Context, in *RegisterHyperloopRequest, opts ...grpc.CallOption) (*RegisterHyperloopResponse, error)
	PushHyperloopHtlcNonce(ctx context.Context, in *PushHyperloopHtlcNonceRequest, opts ...grpc.CallOption) (*PushHyperloopHtlcNonceResponse, error)
	PushHyperloopHtlcSig(ctx context.Context, in *PushHyperloopHtlcSigRequest, opts ...grpc.CallOption) (*PushHyperloopHtlcSigResponse, error)
	PushHyperloopPreimage(ctx context.Context, in *PushHyperloopPreimageRequest, opts ...grpc.CallOption) (*PushHyperloopPreimageResponse, error)
	PushHyperloopSweeplessSweepSig(ctx context.Context, in *PushHyperloopSweeplessSweepSigRequest, opts ...grpc.CallOption) (*PushHyperloopSweeplessSweepSigResponse, error)
}

type hyperloopServerClient struct {
	cc grpc.ClientConnInterface
}

func NewHyperloopServerClient(cc grpc.ClientConnInterface) HyperloopServerClient {
	return &hyperloopServerClient{cc}
}

func (c *hyperloopServerClient) GetHyperLoopStatus(ctx context.Context, in *GetHyperLoopStatusRequest, opts ...grpc.CallOption) (*GetHyperLoopStatusResponse, error) {
	out := new(GetHyperLoopStatusResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/GetHyperLoopStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperloopServerClient) RegisterHyperloop(ctx context.Context, in *RegisterHyperloopRequest, opts ...grpc.CallOption) (*RegisterHyperloopResponse, error) {
	out := new(RegisterHyperloopResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/RegisterHyperloop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperloopServerClient) PushHyperloopHtlcNonce(ctx context.Context, in *PushHyperloopHtlcNonceRequest, opts ...grpc.CallOption) (*PushHyperloopHtlcNonceResponse, error) {
	out := new(PushHyperloopHtlcNonceResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/PushHyperloopHtlcNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperloopServerClient) PushHyperloopHtlcSig(ctx context.Context, in *PushHyperloopHtlcSigRequest, opts ...grpc.CallOption) (*PushHyperloopHtlcSigResponse, error) {
	out := new(PushHyperloopHtlcSigResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/PushHyperloopHtlcSig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperloopServerClient) PushHyperloopPreimage(ctx context.Context, in *PushHyperloopPreimageRequest, opts ...grpc.CallOption) (*PushHyperloopPreimageResponse, error) {
	out := new(PushHyperloopPreimageResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/PushHyperloopPreimage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperloopServerClient) PushHyperloopSweeplessSweepSig(ctx context.Context, in *PushHyperloopSweeplessSweepSigRequest, opts ...grpc.CallOption) (*PushHyperloopSweeplessSweepSigResponse, error) {
	out := new(PushHyperloopSweeplessSweepSigResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/PushHyperloopSweeplessSweepSig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HyperloopServerServer is the server API for HyperloopServer service.
// All implementations must embed UnimplementedHyperloopServerServer
// for forward compatibility
type HyperloopServerServer interface {
	GetHyperLoopStatus(context.Context, *GetHyperLoopStatusRequest) (*GetHyperLoopStatusResponse, error)
	RegisterHyperloop(context.Context, *RegisterHyperloopRequest) (*RegisterHyperloopResponse, error)
	PushHyperloopHtlcNonce(context.Context, *PushHyperloopHtlcNonceRequest) (*PushHyperloopHtlcNonceResponse, error)
	PushHyperloopHtlcSig(context.Context, *PushHyperloopHtlcSigRequest) (*PushHyperloopHtlcSigResponse, error)
	PushHyperloopPreimage(context.Context, *PushHyperloopPreimageRequest) (*PushHyperloopPreimageResponse, error)
	PushHyperloopSweeplessSweepSig(context.Context, *PushHyperloopSweeplessSweepSigRequest) (*PushHyperloopSweeplessSweepSigResponse, error)
	mustEmbedUnimplementedHyperloopServerServer()
}

// UnimplementedHyperloopServerServer must be embedded to have forward compatible implementations.
type UnimplementedHyperloopServerServer struct {
}

func (UnimplementedHyperloopServerServer) GetHyperLoopStatus(context.Context, *GetHyperLoopStatusRequest) (*GetHyperLoopStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHyperLoopStatus not implemented")
}
func (UnimplementedHyperloopServerServer) RegisterHyperloop(context.Context, *RegisterHyperloopRequest) (*RegisterHyperloopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterHyperloop not implemented")
}
func (UnimplementedHyperloopServerServer) PushHyperloopHtlcNonce(context.Context, *PushHyperloopHtlcNonceRequest) (*PushHyperloopHtlcNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushHyperloopHtlcNonce not implemented")
}
func (UnimplementedHyperloopServerServer) PushHyperloopHtlcSig(context.Context, *PushHyperloopHtlcSigRequest) (*PushHyperloopHtlcSigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushHyperloopHtlcSig not implemented")
}
func (UnimplementedHyperloopServerServer) PushHyperloopPreimage(context.Context, *PushHyperloopPreimageRequest) (*PushHyperloopPreimageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushHyperloopPreimage not implemented")
}
func (UnimplementedHyperloopServerServer) PushHyperloopSweeplessSweepSig(context.Context, *PushHyperloopSweeplessSweepSigRequest) (*PushHyperloopSweeplessSweepSigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushHyperloopSweeplessSweepSig not implemented")
}
func (UnimplementedHyperloopServerServer) mustEmbedUnimplementedHyperloopServerServer() {}

// UnsafeHyperloopServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HyperloopServerServer will
// result in compilation errors.
type UnsafeHyperloopServerServer interface {
	mustEmbedUnimplementedHyperloopServerServer()
}

func RegisterHyperloopServerServer(s grpc.ServiceRegistrar, srv HyperloopServerServer) {
	s.RegisterService(&HyperloopServer_ServiceDesc, srv)
}

func _HyperloopServer_GetHyperLoopStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHyperLoopStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).GetHyperLoopStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/GetHyperLoopStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).GetHyperLoopStatus(ctx, req.(*GetHyperLoopStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperloopServer_RegisterHyperloop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHyperloopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).RegisterHyperloop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/RegisterHyperloop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).RegisterHyperloop(ctx, req.(*RegisterHyperloopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperloopServer_PushHyperloopHtlcNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushHyperloopHtlcNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).PushHyperloopHtlcNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/PushHyperloopHtlcNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).PushHyperloopHtlcNonce(ctx, req.(*PushHyperloopHtlcNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperloopServer_PushHyperloopHtlcSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushHyperloopHtlcSigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).PushHyperloopHtlcSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/PushHyperloopHtlcSig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).PushHyperloopHtlcSig(ctx, req.(*PushHyperloopHtlcSigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperloopServer_PushHyperloopPreimage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushHyperloopPreimageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).PushHyperloopPreimage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/PushHyperloopPreimage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).PushHyperloopPreimage(ctx, req.(*PushHyperloopPreimageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperloopServer_PushHyperloopSweeplessSweepSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushHyperloopSweeplessSweepSigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).PushHyperloopSweeplessSweepSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/PushHyperloopSweeplessSweepSig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).PushHyperloopSweeplessSweepSig(ctx, req.(*PushHyperloopSweeplessSweepSigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HyperloopServer_ServiceDesc is the grpc.ServiceDesc for HyperloopServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HyperloopServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "looprpc.HyperloopServer",
	HandlerType: (*HyperloopServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHyperLoopStatus",
			Handler:    _HyperloopServer_GetHyperLoopStatus_Handler,
		},
		{
			MethodName: "RegisterHyperloop",
			Handler:    _HyperloopServer_RegisterHyperloop_Handler,
		},
		{
			MethodName: "PushHyperloopHtlcNonce",
			Handler:    _HyperloopServer_PushHyperloopHtlcNonce_Handler,
		},
		{
			MethodName: "PushHyperloopHtlcSig",
			Handler:    _HyperloopServer_PushHyperloopHtlcSig_Handler,
		},
		{
			MethodName: "PushHyperloopPreimage",
			Handler:    _HyperloopServer_PushHyperloopPreimage_Handler,
		},
		{
			MethodName: "PushHyperloopSweeplessSweepSig",
			Handler:    _HyperloopServer_PushHyperloopSweeplessSweepSig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyperloop.proto",
}
